\section{Fundamentals of R programming}

\begin{frame}[fragile=singleslide]
  \frametitle{Basic data types and operators}

  Programming boils down to manipulation of \alert{data} with the help
  of \alert{procedures}.

  \begin{itemize}
  \item Basic data types
    \begin{itemize}
    \item digits and numbers: \verb|0 1 2 3 4 5 6 7 8 9 10 11...|
    \item boolean values: \verb|TRUE|, \verb|FALSE|
    \item missing value: \verb|NA|
    \item infinite and indeterminate values: \verb|Inf|, \verb|-Inf|, \verb|NaN|
    \item ``void'' value: \verb|NULL|
    \item complex numbers: \verb|1 + 2i|
    \item character strings: \verb|"a"|, \verb|"abc"|
    \end{itemize}
  \item Basic procedures
    \begin{itemize}
    \item arithmetic: \verb| +  -  *  /  ^  <  >=  ==|, etc.
    \item logical: \verb= &  |  !=
    \item assignment: \verb| <-|
    \end{itemize}
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Vectors}

  In R \alert{everything} is a vector.

  \begin{itemize}
  \item Atomic vector: all elements of the same \alert{mode}
  \item Base functions to create atomic vectors:
    \begin{itemize}
    \item \texttt{c} (concatenate);
    \item \texttt{numeric} (numeric vector)
    \item \texttt{logical} (logical vector)
    \item \texttt{character} (character strings vector)
    \end{itemize}
  \end{itemize}
\end{frame}

\begin{frame}[fragile=singleslide]
  \frametitle{Vectors (cont.)}

  \begin{itemize}
  \item Possible to name (label) the elements
<<echo=TRUE>>=
(v <- c(a = 1, b = 2, c = 5))
@
  \item Indexing with square brackets \verb=[ ]=
<<echo=TRUE>>=
v[3]
v["c"]
@
  \end{itemize}
\end{frame}

\begin{frame}[fragile=singleslide]
  \frametitle{Vector arithmetic}

  One of the great strengths of R.

  \begin{itemize}
  \item Basic procedures defined on vectors
<<echo=TRUE>>=
c(1, 3, 4) + c(2, 1, 5)
@
  \item Automatic \alert{recycling} of elements in all operations on
    vectors
<<echo=TRUE>>=
c(1, 1, 4, 4) + c(1, 2)
@
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Functions}

  R is a \alert{functionnal} programming language.

  \begin{itemize}
  \item Program $=$ sequence of function calls
  \item Function is a standard \alert{object}
    \begin{itemize}
    \item contents (source code) accessible
    \item functions allowed in argument of a function
    \item function can return a function
    \item user may define new functions
    \end{itemize}
  \end{itemize}
\end{frame}

\begin{frame}[fragile=singleslide]
  \frametitle{Functions (cont.)}

  \begin{itemize}
  \item Definition of new function
    \begin{Schunk}
\begin{lstlisting}
`\meta{fun}' <- function(`\meta{arguments}') `\meta{statement}'
\end{lstlisting}
    \end{Schunk}
    \begin{itemize}
    \item \meta{fun} name of the function
    \item \meta{arguments} list of comma-separated arguments
    \item \meta{statement} body of the function, single statement or
      group of statements delimited by braces \verb={ }=
    \end{itemize}
  \item Function always returns the value of the \alert{last}
    statement
    \begin{itemize}
    \item \code{return} on last line is useless
    \item assignment on last line $=$ function returns nothing
    \end{itemize}
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Lexical scope}

  The \alert{scope} of a variable is the region of a program where the
  binding between the name of the object and its value is defined.

  \begin{itemize}
  \item Environment
    \begin{snugshade*}
      \centering
      \setlength{\unitlength}{1mm}
      \begin{picture}(50,32)
        \put(10,0){\framebox(40,25)[tl]{
            \begin{minipage}{35\unitlength}
              \rule{0mm}{2ex} % increase distance from frame
              Evaluation frame \\[6pt]
              (\meta{symbol}, \meta{value}) \\
              (\meta{symbol}, \meta{value}) \\
              $\vdots$
            \end{minipage}}}
        \put(10,20){\line(-1,0){8}}
        \put(2,20){\vector(0,1){7}}
        \put(0,29){parent environment}
      \end{picture}
    \end{snugshade*}
  \item Environments created implicitly by function calls
  \item User may also create and manipulate environments
  \item Global environment \code{.GlobalEnv} ($\approx$ workspace)
    parent of most objects
  \end{itemize}
\end{frame}

\begin{frame}[fragile=singleslide]
  \frametitle{Lexical scope (cont.)}

  Lexical scoping rules of R when looking up a symbol:
  \begin{enumerate}
  \item Current frame
    \begin{itemize}
    \item if symbol is found, value is returned
    \end{itemize}
  \item Enclosing environment
    \begin{itemize}
    \item repeat as needed
    \end{itemize}
  \item If \code{.GlobalEnv} reached, continue along the search path
    of packages:
<<echo=TRUE>>=
search()
@
  \item After environment of base package, go to empty environment and fail
  \end{enumerate}
\end{frame}

\begin{frame}[fragile=singleslide]
  \frametitle{Conditional execution}

  \begin{minipage}{\linewidth}
    \begin{minipage}[t]{0.48\linewidth}
      \begin{Schunk}
\begin{lstlisting}
if (`\meta{condition}')
    `\meta{consequence}'
\end{lstlisting}
      \end{Schunk}
    \end{minipage}
    \begin{minipage}[t]{0.48\linewidth}
      \begin{Schunk}
\begin{lstlisting}
if (`\meta{condition}')
    `\meta{consequence}'
else
    `\meta{alternative}'
\end{lstlisting}
      \end{Schunk}
    \end{minipage} \\
    \mbox{}
  \end{minipage}
  \begin{itemize}
  \item \meta{condition} statement evaluating to \alert{unique} value
    \texttt{TRUE} or \texttt{FALSE}
    \begin{itemize}
    \item useful: \verb=all=, \verb=any=,
      \verb=isTRUE=, \dots
    \item useless: \verb|if (TRUE == TRUE)|
    \end{itemize}
  \item \meta{consequence} statement, or group of statement to execute
    when condition is \texttt{TRUE}
  \item \meta{alternative} statement, or group of statement to execute
    when condition is \texttt{FALSE}
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Repeated execution}

  \tipbox{
    \begin{itemize}
    \item First try to vectorize calculations
    \item Use functions
      \begin{itemize}
      \item \texttt{outer}
      \item \texttt{apply}
      \item \texttt{tapply}
      \item \texttt{lapply}, \texttt{sapply}
      \item \texttt{mapply}
      \end{itemize}
    \end{itemize}}
\end{frame}

\begin{frame}[fragile=singleslide]
  \frametitle{Three types of loops}

  Number of repetitions known.
  \begin{Schunk}
\begin{lstlisting}
for (`\meta{variable}' in `\meta{sequence}')
    `\meta{statement}'
\end{lstlisting}
  \end{Schunk}

  Number of repetitions unknown, maybe never executed.
  \begin{Schunk}
\begin{lstlisting}
while (`\meta{condition}')
    `\meta{statement}'
\end{lstlisting}
  \end{Schunk}

  Number of repetitions unknown, executed at least once.
  \begin{Schunk}
\begin{lstlisting}
repeat
    `\meta{statement}'
\end{lstlisting}
  \end{Schunk}
\end{frame}

\begin{frame}
  \frametitle{Flow control}

  \begin{itemize}
  \item \texttt{break} causes exit from innermost loop
  \item \texttt{next} forces execution of the next iteration of
    the loop
  \item \texttt{stop()} forces exit from function with error message
  \item \texttt{warning()} forces exit from function with warning
  \item \texttt{return()} forces exit from function with value
  \end{itemize}

  \pause
  \gotoR{fundamentals.R}
\end{frame}

%%% Local Variables:
%%% mode: latex
%%% TeX-engine: xetex
%%% TeX-master: "ime-2017-workshop-computational-actuarial-science-r"
%%% End:
