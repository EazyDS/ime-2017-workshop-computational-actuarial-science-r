\section{Elements of floating point arithmetic}

\begin{frame}
  \frametitle{R results are wrong!}

  Let's start with some examples of R (apparently) giving erroneous
  results.

  \gotoR{wrong.R}
\end{frame}

\begin{frame}
  \frametitle{Fundamental law of floating point arithmetic}

  \begin{quote}
    10 times 0.1 is hardly ever 1 \citep{Kernighan:style:1978}
  \end{quote}
\end{frame}

\begin{frame}
  \frametitle{FAQ of the R FAQ}

  \begin{itemize}
  \item \link{https://cran.r-project.org/doc/FAQ/R-FAQ.html\#Why-doesn_0027t-R-think-these-numbers-are-equal_003f}{``Why doesnâ€™t R think these numbers are equal?''} \citep[question 7.31]{R-FAQ}
  \item \link{http://link.springer.com/content/pdf/bbm\%3A978-1-4939-2122-5\%2F1.pdf}{``Computational Precision and Floating-Point Arithmetic''}
    \citep[Appendix G]{Heiberger:2015:statistical_analysis}
  \item \link{http://www.validlab.com/goldberg/paper.pdf}{``What Every Computer Scientist Should Know About
    Floating-Point Arithmetic''} \citep{Goldberg:1991:floating_point}
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Internal representation of numbers}

  R works with \alert{double precision} numbers represented in the
  computer as binary numbers of the form
  \begin{equation*}
    (-1)^S \times 2^{E - 1023} \times 1.F
  \end{equation*}
  with
  \begin{align*}
    S &\in \{0, 1\}_2 && \text{(1 bit for the sign)} \\
    E &\in \{0, 1, \dots, 2^{11} - 1\}_2 && \text{(11 bits for the exponent)} \\
    F &\in \{0, 1, \dots, 2^{52} - 1\}_2 && \text{(52 bits for the mantissa)}
  \end{align*}
  \vfill\small
  \link{https://en.wikipedia.org/wiki/IEEE_754}{IEEE Standard for Floating-Point Arithmetic (IEEE 754)}
\end{frame}

\begin{frame}
  \begin{example}
    \begin{itemize}
    \item $\frac{1}{10}$ has a non-finite representation in binary:
      \begin{equation*}
        0.0001100110011001100110011001\dots
      \end{equation*}
    \item In the finite IEEE~754 representation, we get
      \begin{equation*}
        (-1)^0 \times 2^{-4} \times
        \left(
          1 + \sum_{k = 0}^{12} (2^{-4k - 1} + 2^{-4k - 4})
        \right) \approx
        0.09999999999999999166
      \end{equation*}
    \item Multiply this number by $10$ and you don't get back $1$.
    \end{itemize}
  \end{example}
\end{frame}

\begin{frame}
  \frametitle{Key characteristics of double precision numbers}

  \begin{itemize}
  \item Largest representable number
    \begin{equation*}
      x_{\text{max}} = 2^{1023} \times (2 - 2^{-52})
      \approx 1.797693 \times 10^{308}
    \end{equation*}
  \item Smallest representable number
    \begin{equation*}
      x_{\text{min}} = 2^{-1074} \approx 4.940656 \times 10^{-324}
    \end{equation*}
  \item Machine epsilon, smallest number such that
    $1 + \varepsilon \neq 1$
    \begin{equation*}
      \varepsilon = 2^{-52} = 2.220446 \times 10^{-16}
    \end{equation*}
  \item Each representable number corresponds to a \alert{range} of
    values in $\mathbb{R}$
  \item Set of representable numbers more dense for small values than
    for large ones:
    \begin{align*}
      x_{\text{min}}^+ - x_{\text{min}}
      &= 2^{-1074} \approx 10^{-324} \\
      x_{\text{max}} - x_{\text{max}}^-
      &= 2^{971} \approx 10^{292}
    \end{align*}
  \end{itemize}
\end{frame}

\begin{frame}[fragile=singleslide]
  \frametitle{Obtaining these values in R}

<<echo=TRUE>>=
.Machine[c(1, 3:6, 11)]
@
\end{frame}

\begin{frame}[fragile=singleslide]
  \frametitle{Lesson learned: testing equality}

  \begin{itemize}
  \item Do \alert{not} test equality between computed numbers in R
    with \verb|==|
  \item Function \code{all.equal} is your friend
    \begin{Schunk}
\begin{lstlisting}
all.equal(target, current,
          tolerance = .Machine$double.eps ^ 0.5, scale = NULL,
          ..., check.attributes = TRUE)
\end{lstlisting} %$
    \end{Schunk}
  \end{itemize}
\end{frame}

\begin{frame}
  \frametitle{Additional tips}

  \begin{itemize}
  \item<1-> Rules of arithmetic do not apply in floating point!
    \begin{itemize}
    \item order of operations matter
    \item magnitude of numbers matter
    \end{itemize}
  \item<2-> Relative cost of operations
    \begin{itemize}
    \item[]
      \begin{tabular}{lr}
        Addition and subtraction & 1.0 \\
        Multiplication           & 1.3 \\
        Division                 & 3.0 \\
        Square root              & 4.0 \\
        Logarithm                & 15.4 \\
      \end{tabular}
    \end{itemize}
  \item<3-> Log scale is your friend (another)
    \begin{itemize}
    \item $xy$ overflows later if computed as $e^{\log x + \log y}$
    \item R provides \code{log1p} to compute $\log(1 + x)$ and
      \code{expm1} to compute $e^x - 1$ accurately for small $x$.
    \end{itemize}
  \end{itemize}
\end{frame}

\begin{frame}[fragile]
  \frametitle{Good practices}
  \begin{columns}
    \begin{column}{5cm}
      Instead of doing\dots
      \begin{Schunk}
      \begin{verbatim}
x^(1/2)

x^(1/5)

(1/k) * x

sum(x/k)
      \end{verbatim}
      \end{Schunk}
    \end{column}
    \begin{column}{5cm}
      \dots\ rather do
      \begin{Schunk}
      \begin{verbatim}
sqrt(x)

x^0.2

x/k

sum(x)/k
      \end{verbatim}
      \end{Schunk}
    \end{column}
  \end{columns}

  \pause
  \gotoR{floatingpoint.R}
\end{frame}


%%% Local Variables:
%%% mode: latex
%%% TeX-engine: xetex
%%% TeX-master: "ime-2017-workshop-computational-actuarial-science-r"
%%% End:
